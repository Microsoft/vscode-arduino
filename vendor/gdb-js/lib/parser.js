module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
    (function() {
        "use strict";

        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message  = message;
            this.expected = expected;
            this.found    = found;
            this.location = location;
            this.name     = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        peg$SyntaxError.buildMessage = function(expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function(expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },

                "class": function(expectation) {
                    var escapedParts = "",
                        i;

                    for (i = 0; i < expectation.parts.length; i++) {
                        escapedParts += expectation.parts[i] instanceof Array
                            ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                            : classEscape(expectation.parts[i]);
                    }

                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                },

                any: function(expectation) {
                    return "any character";
                },

                end: function(expectation) {
                    return "end of input";
                },

                other: function(expectation) {
                    return expectation.description;
                }
            };

            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }

            function literalEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/"/g,  '\\"')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function classEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/\]/g, '\\]')
                    .replace(/\^/g, '\\^')
                    .replace(/-/g,  '\\-')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }

            function describeExpected(expected) {
                var descriptions = new Array(expected.length),
                    i, j;

                for (i = 0; i < expected.length; i++) {
                    descriptions[i] = describeExpectation(expected[i]);
                }

                descriptions.sort();

                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }

                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];

                    case 2:
                        return descriptions[0] + " or " + descriptions[1];

                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }

            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }

            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };

        function peg$parse(input, options) {
            options = options !== void 0 ? options : {};

            var peg$FAILED = {},

                peg$startRuleFunctions = { Line: peg$parseLine },
                peg$startRuleFunction  = peg$parseLine,

                peg$c0 = "(gdb) ",
                peg$c1 = peg$literalExpectation("(gdb) ", false),
                peg$c2 = function() { return { type: 'prompt' } },
                peg$c3 = peg$anyExpectation(),
                peg$c4 = function() { return { type: 'target', data: text() } },
                peg$c5 = "^",
                peg$c6 = peg$literalExpectation("^", false),
                peg$c7 = function(token, state, results) {
                    return { token: token, type: 'result', state, data: makeResults(results) }
                },
                peg$c8 = "*",
                peg$c9 = peg$literalExpectation("*", false),
                peg$c10 = function(token, obj) {
                    return { token: token, type: 'exec', state: obj.state, data: obj.data }
                },
                peg$c11 = "+",
                peg$c12 = peg$literalExpectation("+", false),
                peg$c13 = function(token, obj) {
                    return {token: token, type: 'status', state: obj.state, data: obj.data }
                },
                peg$c14 = "=",
                peg$c15 = peg$literalExpectation("=", false),
                peg$c16 = function(token, obj) {
                    return { token: token, type: 'notify', state: obj.state, data: obj.data }
                },
                peg$c17 = "~",
                peg$c18 = peg$literalExpectation("~", false),
                peg$c19 = function(data) { return { type: 'console', data } },
                peg$c20 = "@",
                peg$c21 = peg$literalExpectation("@", false),
                peg$c22 = function(data) { return { type: 'target', data } },
                peg$c23 = "&",
                peg$c24 = peg$literalExpectation("&", false),
                peg$c25 = function(data) { return { type: 'log', data } },
                peg$c26 = function(state, results) {
                    return { state, data: makeResults(results) }
                },
                peg$c27 = ",",
                peg$c28 = peg$literalExpectation(",", false),
                peg$c29 = function(result) { return result },
                peg$c30 = function(value) { return value },
                peg$c31 = "",
                peg$c32 = function(name, value) { return { name, value } },
                peg$c33 = "{}",
                peg$c34 = peg$literalExpectation("{}", false),
                peg$c35 = function() { return {}; },
                peg$c36 = "{",
                peg$c37 = peg$literalExpectation("{", false),
                peg$c38 = "}",
                peg$c39 = peg$literalExpectation("}", false),
                peg$c40 = function(result, results) {
                    return makeResults([result, ...results])
                },
                peg$c41 = "[]",
                peg$c42 = peg$literalExpectation("[]", false),
                peg$c43 = function() { return []; },
                peg$c44 = "[",
                peg$c45 = peg$literalExpectation("[", false),
                peg$c46 = "]",
                peg$c47 = peg$literalExpectation("]", false),
                peg$c48 = function(value, values) { return [value, ...values] },
                peg$c49 = function(result, results) { return [result, ...results] },
                peg$c50 = "done",
                peg$c51 = peg$literalExpectation("done", false),
                peg$c52 = "running",
                peg$c53 = peg$literalExpectation("running", false),
                peg$c54 = "connected",
                peg$c55 = peg$literalExpectation("connected", false),
                peg$c56 = "error",
                peg$c57 = peg$literalExpectation("error", false),
                peg$c58 = "exit",
                peg$c59 = peg$literalExpectation("exit", false),
                peg$c60 = "stopped",
                peg$c61 = peg$literalExpectation("stopped", false),
                peg$c62 = peg$otherExpectation("c-string"),
                peg$c63 = "\"",
                peg$c64 = peg$literalExpectation("\"", false),
                peg$c65 = function(chars) { return decodeURIComponent(chars.join('')) },
                peg$c66 = peg$otherExpectation("char"),
                peg$c67 = /^[^%\\"]/,
                peg$c68 = peg$classExpectation(["%", "\\", "\""], true, false),
                peg$c69 = "%",
                peg$c70 = peg$literalExpectation("%", false),
                peg$c71 = function() { return '%25' },
                peg$c72 = "\\",
                peg$c73 = peg$literalExpectation("\\", false),
                peg$c74 = /^[0-7]/,
                peg$c75 = peg$classExpectation([["0", "7"]], false, false),
                peg$c76 = function(seq) { return '%' + parseInt(seq.join(''), 8).toString(16) },
                peg$c77 = function(seq) { return seq },
                peg$c78 = peg$otherExpectation("escaped"),
                peg$c79 = "b",
                peg$c80 = peg$literalExpectation("b", false),
                peg$c81 = function() { return '\b' },
                peg$c82 = "f",
                peg$c83 = peg$literalExpectation("f", false),
                peg$c84 = function() { return '\f' },
                peg$c85 = "n",
                peg$c86 = peg$literalExpectation("n", false),
                peg$c87 = function() { return '\n' },
                peg$c88 = "r",
                peg$c89 = peg$literalExpectation("r", false),
                peg$c90 = function() { return '\r' },
                peg$c91 = "t",
                peg$c92 = peg$literalExpectation("t", false),
                peg$c93 = function() { return '\t' },
                peg$c94 = peg$otherExpectation("string"),
                peg$c95 = /^[a-zA-Z\-_]/,
                peg$c96 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false),
                peg$c97 = function() { return text() },
                peg$c98 = peg$otherExpectation("token"),
                peg$c99 = /^[0-9]/,
                peg$c100 = peg$classExpectation([["0", "9"]], false, false),
                peg$c101 = function() { return parseInt(text(), 10) },

                peg$currPos          = 0,
                peg$savedPos         = 0,
                peg$posDetailsCache  = [{ line: 1, column: 1 }],
                peg$maxFailPos       = 0,
                peg$maxFailExpected  = [],
                peg$silentFails      = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildStructuredError(
                    [peg$otherExpectation(description)],
                    input.substring(peg$savedPos, peg$currPos),
                    location
                );
            }

            function error(message, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildSimpleError(message, location);
            }

            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }

            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$anyExpectation() {
                return { type: "any" };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }

            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos], p;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line:   details.line,
                        column: details.column
                    };

                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails   = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line:   startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line:   endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }

            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(
                    peg$SyntaxError.buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parseLine() {
                var s0, s1, s2;

                s0 = peg$parseAsyncRecord();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseStreamRecord();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseResultRecord();
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c0) {
                                s1 = peg$c0;
                                peg$currPos += 6;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c1); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c2();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = [];
                                if (input.length > peg$currPos) {
                                    s2 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                }
                                while (s2 !== peg$FAILED) {
                                    s1.push(s2);
                                    if (input.length > peg$currPos) {
                                        s2 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                    }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c4();
                                }
                                s0 = s1;
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseAsyncRecord() {
                var s0;

                s0 = peg$parseExecAsyncOutput();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseStatusAsyncOutput();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseNotifyAsyncOutput();
                    }
                }

                return s0;
            }

            function peg$parseStreamRecord() {
                var s0;

                s0 = peg$parseConsoleStreamOutput();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseTargetStreamOutput();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseLogStreamOutput();
                    }
                }

                return s0;
            }

            function peg$parseResultRecord() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parseToken();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                        s2 = peg$c5;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c6); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseResultClass();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseResultsList();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c7(s1, s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExecAsyncOutput() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseToken();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s2 = peg$c8;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseAsyncOutput();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseStatusAsyncOutput() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseToken();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s2 = peg$c11;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseAsyncOutput();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c13(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotifyAsyncOutput() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseToken();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s2 = peg$c14;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseAsyncOutput();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c16(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseConsoleStreamOutput() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 126) {
                    s1 = peg$c17;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseConst();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c19(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseTargetStreamOutput() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 64) {
                    s1 = peg$c20;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseConst();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c22(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLogStreamOutput() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c23;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseConst();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c25(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAsyncOutput() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseAsyncClass();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseResultsList();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseResultsList() {
                var s0, s1, s2, s3;

                s0 = [];
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s2 = peg$c27;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseResult();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c29(s3);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s2 = peg$c27;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseResult();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c29(s3);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseValuesList() {
                var s0, s1, s2, s3;

                s0 = [];
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s2 = peg$c27;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseValue();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c30(s3);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s2 = peg$c27;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseValue();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c30(s3);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseResult() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseString();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s2 = peg$c14;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$c31;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseValue();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c32(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseValue() {
                var s0;

                s0 = peg$parseConst();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseTuple();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseList();
                    }
                }

                return s0;
            }

            function peg$parseTuple() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c33) {
                    s1 = peg$c33;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c35();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s1 = peg$c36;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseResult();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseResultsList();
                            if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s4 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c40(s2, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseList() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c41) {
                    s1 = peg$c41;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s1 = peg$c44;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseValue();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseValuesList();
                            if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s4 = peg$c46;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                }
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c48(s2, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                            s1 = peg$c44;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c45); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseResult();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseResultsList();
                                if (s3 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s4 = peg$c46;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c49(s2, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                return s0;
            }

            function peg$parseResultClass() {
                var s0;

                if (input.substr(peg$currPos, 4) === peg$c50) {
                    s0 = peg$c50;
                    peg$currPos += 4;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c52) {
                        s0 = peg$c52;
                        peg$currPos += 7;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 9) === peg$c54) {
                            s0 = peg$c54;
                            peg$currPos += 9;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c56) {
                                s0 = peg$c56;
                                peg$currPos += 5;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c57); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c58) {
                                    s0 = peg$c58;
                                    peg$currPos += 4;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseAsyncClass() {
                var s0;

                if (input.substr(peg$currPos, 7) === peg$c60) {
                    s0 = peg$c60;
                    peg$currPos += 7;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseString();
                }

                return s0;
            }

            function peg$parseConst() {
                var s0, s1, s2, s3;

                peg$silentFails++;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s1 = peg$c63;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseChar();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseChar();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                            s3 = peg$c63;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c65(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }

                return s0;
            }

            function peg$parseChar() {
                var s0, s1, s2, s3, s4, s5;

                peg$silentFails++;
                if (peg$c67.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 37) {
                        s1 = peg$c69;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c70); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c71();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 92) {
                            s1 = peg$c72;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c73); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$currPos;
                            if (peg$c74.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c75); }
                            }
                            if (s3 !== peg$FAILED) {
                                if (peg$c74.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                }
                                if (s4 !== peg$FAILED) {
                                    if (peg$c74.test(input.charAt(peg$currPos))) {
                                        s5 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s3 = [s3, s4, s5];
                                        s2 = s3;
                                    } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c76(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 92) {
                                s1 = peg$c72;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c73); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parseEscaped();
                                if (s2 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c77(s2);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                }

                return s0;
            }

            function peg$parseEscaped() {
                var s0, s1;

                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s0 = peg$c63;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 92) {
                        s0 = peg$c72;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c73); }
                    }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 98) {
                        s1 = peg$c79;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c81();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 102) {
                            s1 = peg$c82;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c83); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c84();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 110) {
                                s1 = peg$c85;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c86); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c87();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 114) {
                                    s1 = peg$c88;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c89); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c90();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 116) {
                                        s1 = peg$c91;
                                        peg$currPos++;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c93();
                                    }
                                    s0 = s1;
                                }
                            }
                        }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }

                return s0;
            }

            function peg$parseString() {
                var s0, s1, s2;

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                if (peg$c95.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c95.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c97();
                }
                s0 = s1;
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c94); }
                }

                return s0;
            }

            function peg$parseToken() {
                var s0, s1, s2;

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                if (peg$c99.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c99.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c101();
                }
                s0 = s1;
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }

                return s0;
            }


            function makeResults (arr) {
                // XXX: sometimes GDB/MI results don't have name (e.g.
                // `=breakpoint-modified` when `addr` property is `<MULTIPLE>`).
                // Below code helps to turn such records into the array.

                for (let i = 0; i < arr.length; i++) {
                    if (!arr[i].name) arr[i].name = arr[i - 1] ? arr[i - 1].name : 'unnamed';
                }

                let res = arr.reduce((acc, r) => {
                    if (!acc[r.name]) acc[r.name] = []
                    acc[r.name].push(r.value)
                    return acc
                }, {})

                for (let name in res) {
                    if (res[name].length === 1) res[name] = res[name][0]
                }

                return res
            }


            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }

                throw peg$buildStructuredError(
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length
                        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse:       peg$parse
        };
    })();
